---

# Create kubernetes namespace for enclave
- name: "Remove {{ legion_namespace }} namespace"
  shell: "kubectl --context {{ cluster_name }} delete namespace {{ legion_namespace }} --ignore-not-found=true --grace-period=10"

- name: "Check that {{ legion_namespace }} namespace has been removed"
  shell: "kubectl --context {{ cluster_name }} get namespace {{ legion_namespace }}"
  register: namespace_check
  until: namespace_check.stderr.find(' not found') != -1
  retries: 10
  delay: 10
  ignore_errors: true

- name: WORKAROUND delete pods in phase terminating
  shell: kubectl --context {{ cluster_name }} --namespace {{ legion_namespace }}  delete --grace-period=0 --force po $(kubectl --namespace {{ legion_namespace }} get po -o wide | grep Terminating | awk '{ print $1 }') || true

- name: "Confirm that {{ legion_namespace }} namespace has been removed"
  shell: "kubectl --context {{ cluster_name }} get namespace {{ legion_namespace }}"
  register: namespace_check
  until: namespace_check.stderr.find(' not found') != -1
  retries: 10
  delay: 10
  ignore_errors: true

- name: "Create {{ legion_namespace }} namespace"
  shell: "kubectl --context {{ cluster_name }} create namespace {{ legion_namespace }}"

- name: "Label {{ legion_namespace }} namespace"
  shell: "kubectl --context {{ cluster_name }} label ns {{ legion_namespace }} enclave={{ enclave }} istio-injection=enabled --overwrite"

- name: Copy TLS secret
  shell: "kubectl --context {{ cluster_name }} get secret {{ source_secret_name }} -o json --namespace default | jq '.metadata.namespace = \"{{ legion_namespace }}\"' | jq '.metadata.name = \"{{ base_domain }}-tls\"' | kubectl create --context {{ cluster_name }} -f -"

# Create S3 resources
- name: Create S3 buckets for enclave resources
  aws_s3:
    region: "{{ aws_region }}"
    bucket: "{{ legion_data_bucket }}"
    mode: create

# Create IAM roles
- name: Generate Trust policy documents
  template:
    src: trust_policy.yaml.j2
    dest: "{{ tmp_dir }}/trust_policy.{{ cluster_name }}.yaml"

- name: Generate S3 access policy documents
  template:
    src: "enclave_s3_access_policy.yaml.j2"
    dest: "{{ tmp_dir }}/enclave_s3_access_policy.{{ enclave }}.{{ cluster_name }}.yaml"

- name: Create Enclave IAM roles
  iam:
    iam_type: role
    name: "{{ cluster_name }}-{{ enclave }}-{{ item }}-role"
    trust_policy_filepath: "{{ tmp_dir }}/trust_policy.{{ cluster_name }}.yaml"
    state: present
  retries: 10
  delay: 5
  with_items:
    - jslave
    - model
    - collector

- name: Attach S3 accesse policies to the roles
  iam_policy:
    iam_type: role
    iam_name: "{{ cluster_name }}-{{ enclave }}-{{ item }}-role"
    policy_name: "{{ cluster_name }}-{{ enclave }}-s3-access-policy"
    policy_document: "{{ tmp_dir }}/enclave_s3_access_policy.{{ enclave }}.{{ cluster_name }}.yaml"
    state: present
  retries: 10
  delay: 5
  with_items:
    - jslave
    - collector
    - model